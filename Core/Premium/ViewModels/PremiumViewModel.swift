//
//  PremiumViewModel.swift
//  nutrition-app
//
//  Created by Florian Fourcade on 04/04/2025.
//

import Foundation
import StoreKit
import RevenueCat

@MainActor
class PremiumViewModel: ObservableObject {
//    @Published var offerings: Offerings?
    @Published var offerings: Offerings? {
        didSet {
            print("üéÅ Offres re√ßues : \(String(describing: offerings))")
        }
    }

    
    
    func loadProducts() async {
        do {
            print("üåÄ Tentative de chargement des offerings...")
            let fetchedOfferings = try await Purchases.shared.offerings()
            print("‚úÖ Offerings r√©cup√©r√©s : \(fetchedOfferings.all.keys)")

            offerings = fetchedOfferings

            if let current = fetchedOfferings.current {
                print("üì¶ Offering 'current' trouv√© : \(current.identifier)")
                print("üîç Packages disponibles dans current :")

                for package in current.availablePackages {
                    print("‚Ä¢ RevenueCat ID : \(package.identifier) | Store ID : \(package.storeProduct.productIdentifier)")
                }

                if current.availablePackages.isEmpty {
                    print("‚ö†Ô∏è Aucun package dans current.offering")
                }

            } else {
                print("‚ùå Aucun offering 'current' trouv√©")
            }

        } catch {
            print("‚ùå Erreur lors du chargement des offerings : \(error.localizedDescription)")
        }
    }

    func purchase(package: Package) async {
        do {
            let (transaction, customerInfo, userCancelled) = try await Purchases.shared.purchase(package: package)
            
            // ‚úÖ Utilise imm√©diatement customerInfo fourni par le r√©sultat de l'achat
            if customerInfo.entitlements.all["PREMIUM"]?.isActive == true {
                print("‚úÖ Abonnement imm√©diatement actif (via r√©sultat direct de purchase)")
                StoreKitManager.shared.updatePremiumStatus(with: customerInfo)
            } else {
                print("‚ùå Abonnement non actif imm√©diatement apr√®s achat")
            }
        } catch let error as NSError {
            if error.domain == "RevenueCat.ErrorCode", RevenueCat.ErrorCode(_bridgedNSError: error) == .purchaseCancelledError {
                print("‚ùå Achat annul√© par l'utilisateur")
                return
            }
            print("‚ùå Erreur d‚Äôachat RevenueCat : \(error)")
        }
    }
}
